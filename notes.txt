  async getWorksheetData() {
    try {
      // Call the existing JavaScript function
      const result = await returnSheetJSON();
    
      // Check if the result is an array
      if (Array.isArray(result)) {
        // Extract column names
        this.columnNames = Object.keys(result[0] || {});
    
        // Update the MatTableDataSource
        this.dataSource.data = result;
    
        console.log('Data assigned to dataSource:', result);
        console.log('Column names:', this.columnNames);
      } else {
        console.error('Error: The result is not an array.', result);
      }
    } catch (error) {
      console.error('Error:', error);
    }
  }



  //////////////////////////////////////////////////
  /*
  const columns = await worksheet.getSummaryColumnsInfoAsync();
  //console.log(dataTableReader);
  const columnsExport = columns.map(column => column.fieldName);
  const formattedPairs = [];

  for (let currentPage = 0; currentPage < dataTableReader.pageCount; currentPage++) {
    const dataTablePage = await dataTableReader.getPageAsync(currentPage);

    dataTablePage.data.forEach((innerArray) => {
      const pair = innerArray.map((dataValue) => dataValue._formattedValue);
      formattedPairs.push(pair);
    });
  }

  const data = formattedPairs.map((pair) => {
    const obj = {};
    columnsExport.forEach((columnName, index) => {
      obj[columnName] = pair[index];
      if (!isNaN(parseFloat(pair[index].replace(',', '')))) {
        obj[columnName] = parseFloat(pair[index].replace(',', ''));
      }
    });
    return obj;
  });

  return data;
}
*/